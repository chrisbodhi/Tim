#!/usr/bin/env zsh

# Copyright (c) 2013, Göran Gustafsson. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  Redistributions of source code must retain the above copyright notice, this
#  list of conditions and the following disclaimer.
#
#  Redistributions in binary form must reproduce the above copyright notice,
#  this list of conditions and the following disclaimer in the documentation
#  and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

##############################################################################
#   Web: https://github.com/ggustafsson/Tim                                  #
#   Git: git://github.com/ggustafsson/Tim.git                                #
# Email: gustafsson.g@gmail.com                                              #
##############################################################################

VERSION=1.3.2
FILENAME=$0:t # Get the current filename of the script.
DIRECTORY=$0:A:h # Get the path of the directory the script is in.

# Just a few arrays with the names of all different variable settings. Tim
# uses this when checking settings, displaying debug info etc.
CMD_SETTINGS=(TIMER_CMD WORK_CMD BREAK_CMD POMODORO_CMD)
RPT_SETTINGS=(TIMER_REPEAT_CMD POMODORO_REPEAT_CMD)
INT_SETTINGS=(INTERVAL POMODORO_WORK POMODORO_BREAK POMODORO_STOP)


##############################################################################
# CONFIGURATION SECTION                                                      #
##############################################################################
[[ -r ~/.timrc ]] && source ~/.timrc # Lazy fix. This is probably temporary.
                                     # EDIT: I lied. Not temporary at all ;)

if [[ $OSTYPE == darwin* ]]; then
  DEFAULT_CMD=afplay # Comes with Mac OS X.
else
  DEFAULT_CMD="aplay -q" # Comes with alsa-utils.
fi

# If these variables are not found in ~/.timrc then set them. Tim checks for
# audio files in this order: ~/.timrc, ~/.tim folder and then the script $PWD.
if [[ -z $TIMER_CMD ]]; then
  USE_DEFAULT_CMD=1 # If no user set command exist then set this flag.

  if [[ -f ~/.tim/alarm.wav ]]; then
    TIMER_CMD="$DEFAULT_CMD ~/.tim/alarm.wav"
  elif [[ -f $DIRECTORY/audio_files/alarm.wav ]]; then
    TIMER_CMD="$DEFAULT_CMD $DIRECTORY/audio_files/alarm.wav"
  else
    FILE_ERROR=1 # File doesn't exist so set this flag and warn.
  fi
fi

if [[ -z $WORK_CMD ]]; then
  USE_DEFAULT_CMD=1 # If no user set command exist then set this flag.

  if [[ -f ~/.tim/work.wav ]]; then
    WORK_CMD="$DEFAULT_CMD ~/.tim/work.wav"
  elif [[ -f $DIRECTORY/audio_files/work.wav ]]; then
    WORK_CMD="$DEFAULT_CMD $DIRECTORY/audio_files/work.wav"
  else
    FILE_ERROR=1 # File doesn't exist so set this flag and warn.
  fi
fi

if [[ -z $BREAK_CMD ]]; then
  USE_DEFAULT_CMD=1 # If no user set command exist then set this flag.

  if [[ -f ~/.tim/break.wav ]]; then
    BREAK_CMD="$DEFAULT_CMD ~/.tim/break.wav"
  elif [[ -f $DIRECTORY/audio_files/break.wav ]]; then
    BREAK_CMD="$DEFAULT_CMD $DIRECTORY/audio_files/break.wav"
  else
    FILE_ERROR=1 # File doesn't exist so set this flag and warn.
  fi
fi

if [[ -z $POMODORO_CMD ]]; then
  USE_DEFAULT_CMD=1 # If no user set command exist then set this flag.

  if [[ -f ~/.tim/alarm.wav ]]; then
    POMODORO_CMD="$DEFAULT_CMD ~/.tim/alarm.wav"
  elif [[ -f $DIRECTORY/audio_files/alarm.wav ]]; then
    POMODORO_CMD="$DEFAULT_CMD $DIRECTORY/audio_files/alarm.wav"
  else
    FILE_ERROR=1 # File doesn't exist so set this flag and warn.
  fi
fi

# Check if custom settings are set or else set variables to default values.
[[ -z $TIMER_REPEAT_CMD    ]] && TIMER_REPEAT_CMD=0    # Don't repeat
[[ -z $POMODORO_REPEAT_CMD ]] && POMODORO_REPEAT_CMD=0 # Don't repeat

[[ -z $POMODORO_WORK  ]] && POMODORO_WORK=25 # Minutes
[[ -z $POMODORO_BREAK ]] && POMODORO_BREAK=5 # Minutes
[[ -z $POMODORO_STOP  ]] && POMODORO_STOP=4  # Run X times

[[ -z $INTERVAL ]] && INTERVAL=15 # Minutes


##############################################################################
# VALIDATE SETTINGS SECTION                                                  #
##############################################################################
function validate_settings {
  if [[ $USE_DEFAULT_CMD -eq 1 ]]; then
    COMMAND=(${(z)DEFAULT_CMD}) # Puts the value of DEFAULT_CMD into an array.

    if ! type -p $COMMAND[1] >& /dev/null; then # Checks if command exist.
      if [[ $1 == debug ]]; then # Different output if debug mode is on.
        echo "DEFAULT_CMD: Command '$COMMAND[1]' does not exist!" && ERROR=1
      else
        echo "Tim wants to use '$COMMAND[1]' but can't find it!

Install it or specify other command in your ~/.timrc file.
Read the file timrc.example for more information."

        ERROR=1 && return 1 # Set error flag and exit function.
      fi
    fi

    if [[ $FILE_ERROR -eq 1 ]]; then
      if [[ $1 == debug ]]; then # Different output if debug mode is on.
        echo "Tim can't find the default audio files!" && ERROR=1
      else
        echo "Tim can't find the default audio files!

Put them in ~/.tim or specify other files in your ~/.timrc file.
Read the file timrc.example for more information."

        ERROR=1 && return 1 # Set error flag and exit function.
      fi
    fi
  fi

  # Check through all the settings to see if the commands exist.
  for SETTING in $CMD_SETTINGS; do
    COMMAND=(${(zP)SETTING}) # Puts the value of the variable into an array.

    if ! type -p $COMMAND[1] >& /dev/null; then # Checks if command exist.
      echo "$SETTING: Command '$COMMAND[1]' does not exist!" && ERROR=1
    fi
  done

  for SETTING in $RPT_SETTINGS; do
    # Checks if the settings only contain numbers and have a value of 0/1.
    if [[ ! ${(P)SETTING} == <-> || ${(P)SETTING} != [0-1] ]]; then
      echo "$SETTING: Setting '${(P)SETTING}' is not valid." && ERROR=1
    fi
  done

  for SETTING in $INT_SETTINGS; do
    # Checks if the settings only contain numbers and have a value above 0.
    if [[ ! ${(P)SETTING} == <-> || ${(P)SETTING} -lt 1 ]]; then
      echo "$SETTING: Setting '${(P)SETTING}' is not valid." && ERROR=1
    fi
  done

  [[ $1 == debug && $ERROR -eq 1 ]] && echo # echo if running debug mode.
}


##############################################################################
# INFORMATION SECTION                                                        #
##############################################################################
function help {
  [[ ! -z $1 ]] && echo "Invalid: $FILENAME $*\n"

  echo "Usage: $FILENAME [OPTION]... [NUMBER]... [HH:MM]...

  [NUMBER]                   Wait [NUMBER] minutes before starting alarm.
  [HH:MM]                    Wait until [HH:MM] before starting alarm.
  -i, --interval [NUMBER]    Work [NUMBER] minutes and pause [NUMBER] minutes.
                              (Default: 15 minutes work and pause.)
  -ri, --rinterval [NUMBER]  Reverse. Start with break instead of work.
  -p, --pomodoro             Work X minutes and pause X minutes. Run X times.
                              (Default: 25 minutes work, 5 minutes break and
                               stop after 4 times.)
  -d, --debug                Display value of all variables and exit.
  -h, --help                 Display this help and exit.
  -v, --version              Output version information and exit.

Examples:

  $FILENAME 5      # Wait 5 minutes before starting alarm.
  $FILENAME 09:35  # Wait until 09:35 before starting alarm.
  $FILENAME -i 10  # Work for 10 minutes and pause for 10 minutes.
  $FILENAME -i     # Same as above but use the timrc (or default) setting.
  $FILENAME -p     # Pomodoro mode. Using timrc (or default) settings.

Configuration:

  Read the file timrc.example for more information."
}

function version {
  echo "Tim (Timer Script) $VERSION

Web: https://github.com/ggustafsson/Tim
Git: git://github.com/ggustafsson/Tim.git

Written by Göran Gustafsson <gustafsson.g@gmail.com>.
Released under the BSD 2-Clause license."
}


##############################################################################
# TIMER MODE SECTION                                                         #
##############################################################################
function timer {
  validate_settings
  [[ $ERROR -eq 1 ]] && return 1 # Terminate if there's a problem with timrc.

  if [[ $1 == clock ]]; then
    # Use "strftime" instead of "date" because of portability issues.
    zmodload zsh/datetime
    if [[ $2 > $(date '+%H:%M') ]]; then
      # Find out how many seconds there are left until specific time of day.
      MINUTES_IN_SECONDS=$(( $(strftime -r '%Y-%m-%d %H:%M' \
        "$(strftime '%Y-%m-%d' $EPOCHSECONDS) $2") - $EPOCHSECONDS ))
    else
      # Add 24 hours so you can specify time that is lower than current time.
      MINUTES_IN_SECONDS=$(( $(strftime -r '%Y-%m-%d %H:%M' \
        "$(strftime '%Y-%m-%d' $[EPOCHSECONDS + (24 * 60) * 60]) $2") \
        - $EPOCHSECONDS ))
    fi
  else
    MINUTES=$1
    (( MINUTES_IN_SECONDS = $MINUTES * 60 )) # Convert minutes to seconds.
  fi

  echo -n "Starting timer. Waiting "
  if [[ $1 == clock ]]; then
    echo "until $2."
  else
    echo -n "for $MINUTES "
    if [[ $MINUTES -gt 1 ]]; then
      echo "minutes."
    else
      echo "minute."
    fi
  fi
  echo "Stop with Ctrl+C."

  sleep $MINUTES_IN_SECONDS
  print -P "\n%B%F{red}ALARM SET OFF!%f%b"

  if [[ $TIMER_REPEAT_CMD -eq 1 ]]; then
    while true; do
      eval $TIMER_CMD # Execute TIMER_CMD and loop until terminating.
    done
  else
    eval $TIMER_CMD # Execute TIMER_CMD.
  fi
}


##############################################################################
# INTERVAL MODE SECTION                                                      #
##############################################################################
function interval {
  validate_settings
  [[ $ERROR -eq 1 ]] && return 1 # Terminate if there's a problem with timrc.

  if [[ $1 == reverse ]]; then
    SPECIFIC_TIME=$2
  else
    SPECIFIC_TIME=$1
  fi

  if [[ -z $SPECIFIC_TIME ]]; then
    MINUTES=$INTERVAL
  else
    MINUTES=$SPECIFIC_TIME
  fi
  (( MINUTES_IN_SECONDS = $MINUTES * 60 )) # Convert minutes to seconds.

  if [[ $1 == reverse ]]; then
    CURRENT_MODE=break
  else
    CURRENT_MODE=work
  fi

  echo -n "Starting timer. Interval of $MINUTES "
  if [[ $MINUTES -gt 1 ]]; then
    echo "minutes."
  else
    echo "minute."
  fi
  echo -n "Start "
  if [[ $CURRENT_MODE == work ]]; then
    echo -n "working"
  else
    echo -n "break"
  fi
  echo " now. Stop with Ctrl+C."

  while true; do
    sleep $MINUTES_IN_SECONDS

    [[ -z $LINEBREAK ]] && echo && LINEBREAK=0

    if [[ $CURRENT_MODE == work ]]; then
      print -P "%B%F{green}TAKE A LITTLE BREAK!%f%b"
      eval $BREAK_CMD &

      CURRENT_MODE=break
    else
      print -P "%B%F{red}START WORKING NOW!%f%b"
      eval $WORK_CMD &

      CURRENT_MODE=work
    fi
  done
}


##############################################################################
# POMODORO MODE SECTION                                                      #
##############################################################################
function pomodoro {
  validate_settings
  [[ $ERROR -eq 1 ]] && return 1 # Terminate if there's a problem with timrc.

  # Convert minutes to seconds.
  (( POMODORO_WORK_IN_SECONDS  = $POMODORO_WORK  * 60 ))
  (( POMODORO_BREAK_IN_SECONDS = $POMODORO_BREAK * 60 ))

  CURRENT_MODE=work
  CURRENT_RUN=1
  MINUTES_IN_SECONDS=$POMODORO_WORK_IN_SECONDS

  echo "Starting timer. Pomodoro mode:
Work $POMODORO_WORK min. Break $POMODORO_BREAK min. Stop after $POMODORO_STOP.

Start working now. Stop with Ctrl+C."

  while [[ $CURRENT_RUN -lt $POMODORO_STOP ]]; do
    sleep $MINUTES_IN_SECONDS

    [[ -z $LINEBREAK ]] && echo && LINEBREAK=0

    if [[ $CURRENT_MODE == work ]]; then
      print -P "%B%F{green}TAKE A LITTLE BREAK!%f%b"
      eval $BREAK_CMD &

      CURRENT_MODE=break
      MINUTES_IN_SECONDS=$POMODORO_BREAK_IN_SECONDS
    else
      print -Pn "%B%F{red}START WORKING NOW!%f%b Press 'Return' when ready to start..."
      eval $WORK_CMD &
      read WAIT_FOR_INPUT

      CURRENT_MODE=work
      MINUTES_IN_SECONDS=$POMODORO_WORK_IN_SECONDS

      # Increment CURRENT_RUN so we can stop pomodoro mode at POMODORO_STOP.
      (( CURRENT_RUN = $CURRENT_RUN + 1 ))
    fi
  done

  sleep $MINUTES_IN_SECONDS
  echo "\nWorking session is over!"

  if [[ $POMODORO_REPEAT_CMD -eq 1 ]]; then
    while true; do
      eval $POMODORO_CMD # Execute POMODORO_CMD and loop until terminating.
    done
  else
    eval $POMODORO_CMD # Execute POMODORO_CMD.
  fi
}


##############################################################################
# DEBUG SECTION (DISPLAY VARIABLES)                                          #
##############################################################################
function debug {
  echo "DEBUG MODE\n"

  validate_settings debug # Send argument debug to function for more output.

  echo "VALUE OF ALL VARIABLES:
 FILENAME: $FILENAME
 DIRECTORY: $DIRECTORY
 VERSION: $VERSION
 DEFAULT_CMD: $DEFAULT_CMD"

  # Loop through all settings and print them out.
  for SETTING in $CMD_SETTINGS; do
    echo -n " $SETTING: "
    if [[ -z ${(P)SETTING} ]]; then
      echo "Default audio file not found!"
    else
      echo ${(P)SETTING}
    fi
  done

  for SETTING in $RPT_SETTINGS; do
    echo " $SETTING: ${(P)SETTING}"
  done

  for SETTING in $INT_SETTINGS; do
    echo " $SETTING: ${(P)SETTING}"
  done
}


##############################################################################
# OPTIONS AND EXECUTION SECTION                                              #
##############################################################################
case $# in
  0) help ;;
  1)
    case $1 in
      <->) # Check if $1 only contain numbers.
        if [[ $1 -gt 0 ]]; then
          timer $1 # Send argument $1 to the function.
        else
          help $* && return 1
        fi
      ;;
      <0-23>:<0-59>)
        if [[ $* == ??:?? ]]; then
          timer clock $1
        else
          help $* && return 1
        fi
      ;;
      -i  | --interval)  interval         ;;
      -ri | --rinterval) interval reverse ;;
      -p  | --pomodoro)  pomodoro         ;;
      -d  | --debug)     debug            ;;
      -h  | --help)      help             ;;
      -v  | --version)   version          ;;
      *)
        help $* && return 1
      ;;
    esac
  ;;
  2)
    # Check if $1 is -i or --interval and if $2 is integer.
    if [[ $1 == (-i|--interval) && $2 == <-> ]]; then
      if [[ $2 -gt 0 ]]; then # Check if integer is more than 0.
        interval $2 # Send argument $2 to the function.
      else
        help $* && return 1
      fi
    # Check if $1 is -ri or --rinterval and if $2 is integer.
    elif [[ $1 == (-ri|--rinterval) && $2 == <-> ]]; then
      if [[ $2 -gt 0 ]]; then # Check if integer is more than 0.
        interval reverse $2 # Send argument reverse and $2 to the function.
      else
        help $* && return 1
      fi
    else
      help $* && return 1
    fi
  ;;
  *) help $* && return 1 ;;
esac
